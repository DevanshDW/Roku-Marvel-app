"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const testHelpers_spec_1 = require("../testHelpers.spec");
const IndentFormatter_1 = require("./IndentFormatter");
describe('IndentFormatter', () => {
    let formatter;
    beforeEach(() => {
        formatter = new IndentFormatter_1.IndentFormatter();
    });
    describe('ensureTokenIndentation', () => {
        it('does nothing for empty or invalid tokens', () => {
            (0, chai_1.expect)(formatter['ensureTokenIndentation'](null, 0)).to.eql(null);
            (0, chai_1.expect)(formatter['ensureTokenIndentation']([], 0)).to.eql([]);
        });
        it('handles negative tab size', () => {
            (0, testHelpers_spec_1.expectTokens)(formatter['ensureTokenIndentation']((0, testHelpers_spec_1.lex)(`\tspeak()`), -2), ['', 'speak', '(', ')']);
        });
        it('does not add whitespace token if no indentation is needed', () => {
            (0, testHelpers_spec_1.expectTokens)(formatter['ensureTokenIndentation']((0, testHelpers_spec_1.lex)(`speak()`), 0), ['speak', '(', ')']);
        });
        it('dedupes side-by-side whitespace tokens into one', () => {
            (0, testHelpers_spec_1.expectTokens)(formatter['ensureTokenIndentation']((0, testHelpers_spec_1.lex)(` \t speak()`), 1), ['    ', 'speak', '(', ')']);
        });
        it('adds whitespace when missing', () => {
            (0, testHelpers_spec_1.expectTokens)(formatter['ensureTokenIndentation']((0, testHelpers_spec_1.lex)(`speak()`), 1), ['    ', 'speak', '(', ')']);
        });
        it('adds correct indentation when missing', () => {
            (0, testHelpers_spec_1.expectTokens)(formatter['ensureTokenIndentation']((0, testHelpers_spec_1.lex)(`speak()`), 3), ['            ', 'speak', '(', ')']);
        });
        it('uses supplied indentation char when provided', () => {
            (0, testHelpers_spec_1.expectTokens)(formatter['ensureTokenIndentation']((0, testHelpers_spec_1.lex)(`speak()`), 3, '\t'), ['\t\t\t', 'speak', '(', ')']);
        });
    });
    describe('trimWhitespaceOnlyLines', () => {
        it('trims whitespace-only lines', () => {
            (0, testHelpers_spec_1.expectTokens)(formatter['trimWhitespaceOnlyLines']((0, testHelpers_spec_1.lex)(` `)), []);
        });
        it('leaves non-whitespace-only lines intact', () => {
            (0, testHelpers_spec_1.expectTokens)(formatter['trimWhitespaceOnlyLines']((0, testHelpers_spec_1.lex)(` speak()`)), [' ', 'speak', '(', ')']);
        });
    });
});
//# sourceMappingURL=IndentFormatter.spec.js.map